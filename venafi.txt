import requests
from acme import client, messages, crypto_util
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization


class VenafiAcmeClient:
    def __init__(self, acme_directory_url: str, email: str, rsa_key_size: int = 2048):
        self.acme_directory_url = acme_directory_url
        self.email = email
        self.rsa_key_size = rsa_key_size
        self.acme_client = self._initialize_acme_client()

    def _initialize_acme_client(self):
        # Generate a new RSA key
        account_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=self.rsa_key_size
        )

        # Convert the private key to DER format
        account_key_der = account_key.private_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )

        # Initialize the ACME client
        net = client.ClientNetwork(account_key_der)
        directory = client.Directory(self.acme_directory_url, net)
        acme_client = client.ClientV2(directory, net)

        # Register the account
        registration = acme_client.new_account(
            messages.NewRegistration.from_data(email=self.email, terms_of_service_agreed=True)
        )

        return acme_client

    def create_csr(self, common_name: str) -> bytes:
        """Create a Certificate Signing Request (CSR)"""
        # Generate a private key
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=self.rsa_key_size
        )

        # Generate a CSR
        csr = x509.CertificateSigningRequestBuilder().subject_name(x509.Name([
            x509.NameAttribute(NameOID.COMMON_NAME, common_name),
        ])).sign(private_key, hashes.SHA256())

        # Convert CSR to PEM format
        csr_pem = csr.public_bytes(serialization.Encoding.PEM)

        return csr_pem

    def request_certificate(self, common_name: str):
        """Request a new certificate using ACME protocol"""
        # Create CSR
        csr_pem = self.create_csr(common_name)

        # Order a certificate
        order = self.acme_client.new_order(csr_pem)

        # Get the authorization challenges
        authz_list = order.authorizations

        for authz in authz_list:
            # Example for handling HTTP-01 challenge (you need to adapt this for DNS-01 or others)
            challenge = authz.body.challenges[0]
            acme_client.answer_challenge(challenge, challenge.response(self.acme_client.net.key))

        # Finalize the order after challenges are completed
        finalized_order = self.acme_client.poll_and_finalize(order)

        # Retrieve the certificate
        certificate_pem = finalized_order.fullchain_pem

        print(f"Certificate issued for {common_name}")
        print(certificate_pem)

        return certificate_pem

    def renew_certificate(self, certificate_pem: str):
        """Renew an existing certificate"""
        # Load the existing certificate
        cert = crypto_util.ComparableX509(x509.load_pem_x509_certificate(certificate_pem.encode()))

        # Reuse the same common name for renewal
        common_name = cert.subject.get_attributes_for_oid(NameOID.COMMON_NAME)[0].value

        # Request a new certificate for renewal
        return self.request_certificate(common_name)


# Example usage of the VenafiAcmeClient
def main():
    acme_directory_url = "https://acme.example.com/directory"  # Replace with your ACME directory URL from Venafi TPP
    email = "admin@example.com"

    acme_client = VenafiAcmeClient(acme_directory_url, email)

    # Request a new certificate
    common_name = "example.com"
    certificate_pem = acme_client.request_certificate(common_name)

    # Renew the certificate
    renewed_certificate = acme_client.renew_certificate(certificate_pem)

    # Test Case 3: Renew a certificate
    try:
        print("\nTest Case 3: Renewing the certificate...")
        renewed_certificate = acme_client.renew_certificate(certificate_pem)
        print("Certificate renewed successfully.")
    except Exception as e:
        print(f"Error during certificate renewal: {e}")

    # Test Case 4: Invalid domain request
    try:
        print("\nTest Case 4: Requesting a certificate for an unauthorized domain...")
        invalid_cert = acme_client.request_certificate("unauthorized.example.com")
    except Exception as e:
        print(f"Expected error for unauthorized domain: {e}")

if __name__ == "__main__":
    main()

---
Vault can act as either an intermediate CA or a proxy
ACME Challenges (DNS-01/HTTP-01) are handled by Vault, regardless of whether Vault is acting as an Intermediate CA or a Proxy.
This ensures that domain ownership or control is properly validated before issuing certificates.

1. Vault as an Intermediate CA
In this use case, Vault is acting as a PKI (Public Key Infrastructure) intermediate CA within a hierarchy,
where Venafi TPP provides the Root CA. Vault itself will issue certificates as an intermediate,
but these certificates are ultimately trusted by a higher authority (the Root CA) managed by Venafi.

In this model, Vault has more direct control over certificate issuance because it is an
intermediate CA. Certificates issued via ACME are signed by Vault’s intermediate CA and are trusted within the chain
that goes up to Venafi’s Root CA.

Process of certificate issuence overview:
1) ACME Client Requests a Certificate (clients such as web servers (e.g., Nginx, Apache) tools like Certbot, cert-issuer,
can request certificates from Vault using the ACME protocol)
2) Vault Handles the ACME Challenge (Vault validates the request (using DNS-01 or HTTP-01 challenge)
3) Validation Output (on success)
4) Vault Issues the Certificate to the ACME Client

Chain of Trust: The certificate issued by Vault will be trusted because it is signed by Vault’s intermediate CA,
which is part of the certificate chain leading back to the Venafi Root CA.
Vault issues the certificate, signed by its intermediate CA (which was signed by Venafi’s Root CA).



------------------



2. Vault as a Proxy via Venafi PKI Secrets Engine
In this use case, Vault is not acting as a CA (neither Root nor Intermediate). Instead, Vault is acting
as a proxy that forwards certificate requests to Venafi TPP, which handles the actual certificate issuance/management.
In this case, Venafi remains the ultimate issuer of certificates.

Workflow: Vault as a Proxy (Using Venafi PKI Secrets Engine)
In the proxy model (where Vault forwards certificate requests to Venafi for signing),
Vault is responsible for handling the ACME protocol and performing the validation challenges (DNS or HTTP).
Once the challenges are validated, Vault forwards the Certificate Signing Request (CSR) to Venafi for signing.


Process of certificate issuence overview:
1) ACME Client Requests a Certificate (clients such as web servers (e.g., Nginx, Apache) tools like Certbot, cert-issuer,
can request certificates from Vault using the ACME protocol)
2) Vault Handles the ACME Challenge (Vault validates the request (using DNS-01 or HTTP-01 challenge)
3) Validation Output (on success)
4) Vault Forwards the CSR to Venafi
5) Venafi TPP Signs the Certificate and returns to Vault
6) Vault Issues the Certificate to the ACME Client

Proxy Model: When Vault is a proxy, it forwards all ACME requests to Venafi TPP.
Venafi handles all certificate management, which may include signing the certificates using public or internal CAs.
This gives you the flexibility to use public CA integrations while still leveraging Vault’s ACME functionality for automation.

